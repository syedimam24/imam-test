def toolLiquibase() {
    tool name: 'liquibase', type: 'org.jenkinsci.plugins.liquibase.install.LiquibaseInstallation'
}

def getCredentialsEnvVar(database) {
    return "${database}_CREDS"
}

def performRollback(database, action, schema, tag, rollbackDate, rollbackCount) {
    def propertiesFile = "PropertiesFiles/${database}.properties"
    def credsEnvVar = getCredentialsEnvVar(database)
    def timestamp = new Date().format("yyyyMMddHHmmss")
    def s3LogKey = "${S3_PREFIX}/${database}-rollback-${timestamp}.json"
    def logFile = "${BUILD_TAG}-${action}.json"
    def liquibaseCommand = ""

    switch (action) {
        case 'Rollback':
            liquibaseCommand = """
            ${LIQUIBASE_HOME}/liquibase rollback \
                --defaults-file=${propertiesFile} \
                --username=\${${credsEnvVar}_USR} \
                --password=\${${credsEnvVar}_PSW} \
                --log-format=JSON \
                --log-file=${logFile} \
                --default-schema-name=${schema} \
                --tag=${tag}
            """
            break
        case 'Date-Rollback':
            rollbackDate = rollbackDate ?: '2025-01-01'
            liquibaseCommand = """
            ${LIQUIBASE_HOME}/liquibase rollback-to-date --date=${rollbackDate} \
                --defaults-file=${propertiesFile} \
                --username=\${${credsEnvVar}_USR} \
                --password=\${${credsEnvVar}_PSW} \
                --log-format=JSON \
                --log-file=${logFile} \
                --default-schema-name=${schema} \
                --tag=${tag}
            """
            break
        case 'Count-Rollback':
            rollbackCount = rollbackCount ?: '1'
            liquibaseCommand = """
            ${LIQUIBASE_HOME}/liquibase rollback-count --count=${rollbackCount} \
                --defaults-file=${propertiesFile} \
                --username=\${${credsEnvVar}_USR} \
                --password=\${${credsEnvVar}_PSW} \
                --log-format=JSON \
                --log-file=${logFile} \
                --default-schema-name=${schema} \
                --tag=${tag}
            """
            break
        default:
            error "Unknown rollback action: ${action}"
    }

    // Execute the Liquibase command
    sh liquibaseCommand

    return logFile
}

pipeline {
    agent any

    environment {
        // Environment variables for credentials
        DEVL_CREDS = credentials('liquibase-service-devl')
        INTGD_CREDS = credentials('liquibase-service-intgd')
        CERT_CREDS = credentials('liquibase-service-cert')
        PINTGD_CREDS = credentials('liquibase-service-pintgd')
        NEWREL_CREDS = credentials('liquibase-service-newrel')
        WEBDEVL_CREDS = credentials('liquibase-service-webdevl')
        WEBTEST_CREDS = credentials('liquibase-service-webtest')
        LINKTEST_CREDS = credentials('liquibase-service-linktest')
        ORMAUD_CREDS = credentials('liquibase-service-ormaud')
        DEVL2_CREDS = credentials('liquibase-service-devl2')
        BCV1_CREDS = credentials('liquibase-service-bcv1')
        STAGE_CREDS = credentials('liquibase-service-stagedb')
        IRSDEVL_CREDS = credentials('liquibase-service-irsdevl')
        IRSINTGD_CREDS = credentials('liquibase-service-irsintgd')
        PPRD3_CREDS = credentials('liquibase-service-pprd3')
        CONV1_CREDS = credentials('liquibase-service-conv1')
        PERF_CREDS = credentials('liquibase-service-perf')
        VBA1_CREDS = credentials('liquibase-service-vba1')
        LIQUIBASE_HOME = "$HOME/tools/org.jenkinsci.plugins.liquibase.install.LiquibaseInstallation/liquibase"
        SLACK_CHANNEL = '#crp_modernization_jenkins_pipeline'
        S3_BUCKET = 'project-crp-ss-liquibase-logs'
        S3_PREFIX = 'RollbackLogs'
    }

    parameters {
        choice(name: 'DATABASE', choices: [
            'DEVL', 'INTGD', 'CERT', 'PINTGD', 'NEWREL', 'WEBDEVL', 'WEBTEST',
            'LINKTEST', 'ORMAUD', 'DEVL2', 'BCV1', 'STAGE', 'IRSDEVL',
            'IRSINTGD', 'PPRD3', 'CONV1', 'PERF', 'VBA1'
        ], description: 'Please select a database')

        choice(name: 'ROLLBACK_ACTION', choices: [
            'Rollback', 'Date-Rollback', 'Count-Rollback'
        ], description: 'Please select a rollback action')

        choice(name: 'SCHEMA', choices: ['CORPPROD', 'CP'], description: 'Please select a database schema')

        string(name: 'ROLLBACK_DATE', defaultValue: '', description: 'Rollback Date (yyyy-MM-dd)')

        number(name: 'ROLLBACK_COUNT', defaultValue: '', description: 'Rollback count (number)')

        string(name: 'TAG', defaultValue: '', description: 'Tag for Liquibase rollback')
    }

    stages {
        stage('Rollback') {
            steps {
                toolLiquibase()
                script {
                    def database = params.DATABASE
                    def action = params.ROLLBACK_ACTION
                    def schema = params.SCHEMA
                    def tag = params.TAG
                    def rollbackDate = params.ROLLBACK_DATE
                    def rollbackCount = params.ROLLBACK_COUNT

                    // Perform rollback and get the log file path
                    def logFile = performRollback(database, action, schema, tag, rollbackDate, rollbackCount)

                    // Upload log file to S3
                    def s3LogKey = "${S3_PREFIX}/${database}-rollback-${new Date().format("yyyyMMddHHmmss")}.json"
                    sh "aws s3 cp ${logFile} s3://${S3_BUCKET}/${s3LogKey}" 

                    // Check if the upload was successful
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        echo "Log file successfully uploaded to S3: s3://${S3_BUCKET}/${s3LogKey}"
                    } else {
                        error "Failed to upload log file to S3."
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(channel: env.SLACK_CHANNEL, color: 'good', message: "Liquibase rollback to ${params.DATABASE} with action ${params.ROLLBACK_ACTION} successful! Logs available at s3://${S3_BUCKET}/${s3LogKey}")
            }
        }

        failure {
            script {
                slackSend(channel: env.SLACK_CHANNEL, color: 'danger', message: "Liquibase rollback to ${params.DATABASE} with action ${params.ROLLBACK_ACTION} failed. Check the logs at s3://${S3_BUCKET}/${s3LogKey} and investigate.")
            }
        }
    }
}
